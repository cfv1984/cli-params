{"version":3,"file":"index.modern.js","sources":["../src/params/isProcessArgv.js","../src/params/parsers/full_flag.js","../src/params/parsers/short_flag.js","../src/params/parsers/positional.js","../src/params/index.js"],"sourcesContent":["function isProcessArgv(obj) {\r\n  return obj === process.argv;\r\n}\r\n\r\nexport default isProcessArgv;\r\n","const FULL_FLAG = {\r\n  canParse(str) {\r\n    return str.startsWith(\"--\");\r\n  },\r\n  parse(str, _) {\r\n    let [name, value] = str.slice(2).split(\"=\");\r\n    if(!value){\r\n      value === true;\r\n    }\r\n    return { name, value };\r\n  },\r\n};\r\n\r\nexport default FULL_FLAG;","import FULL_FLAG from \"./full_flag\";\r\n\r\nconst SHORT_FLAG = {\r\n  canParse(str) {\r\n    return !FULL_FLAG.canParse(str) && str.startsWith(\"-\");\r\n  },\r\n  parse(str, _) {\r\n    let [name, value] = str.slice(1).split(\"=\");\r\n    if (typeof value === \"undefined\") {\r\n      value = true;\r\n    }\r\n    if ([\"true\", \"false\"].includes(value)) {\r\n      value = value === \"true\";\r\n    }\r\n\r\n    return { name, value };\r\n  },\r\n};\r\n\r\nexport default SHORT_FLAG;\r\n","import FULL_FLAG from \"./full_flag\";\r\nimport SHORT_FLAG from \"./short_flag\";\r\n\r\nconst POSITIONAL = {\r\n  canParse(str) {\r\n    return !SHORT_FLAG.canParse(str) && !FULL_FLAG.canParse(str);\r\n  },\r\n  parse(str, all) {\r\n    const name = all.indexOf(str);\r\n    const value = str;\r\n    return { name, value };\r\n  },\r\n};\r\n\r\nexport default POSITIONAL;;\r\n","import isProcessArgv from \"./isProcessArgv\";\r\nimport { SHORT_FLAG, FULL_FLAG, POSITIONAL } from \"./parsers\";\r\n\r\nfunction params(args = process.argv, aliases = {}) {\r\n  if (!args instanceof Array) {\r\n    throw new Error(\"Bad input, expecting an array of cli parameters\");\r\n  }\r\n  const RAW = Symbol(\"raw\");\r\n  const PARSERS = [SHORT_FLAG, FULL_FLAG, POSITIONAL];\r\n  let params = {\r\n    [RAW]: {\r\n      list: args,\r\n    },\r\n  };\r\n\r\n  if (isProcessArgv(args)) {\r\n    params = {\r\n      [RAW]: {\r\n        file: args[1],\r\n        list: args.slice(2),\r\n      },\r\n    };\r\n  }\r\n\r\n  params.positional = [];\r\n  params.RAW = RAW;\r\n  const { list } = params[RAW];\r\n\r\n  list.forEach((arg) => {\r\n    const parser = PARSERS.filter((p) => p.canParse(arg)).pop();\r\n    if (typeof parser !== \"undefined\") {\r\n      const { name, value } = parser.parse(arg, list);\r\n      if (name === Number(name)) {\r\n        params.positional[name] = value;\r\n      } else {\r\n        params[name] = value;\r\n      }\r\n    }\r\n  });\r\n\r\n  Object.keys(aliases).forEach((newKey) => {\r\n    const oldKey = aliases[newKey];\r\n    const value = params[oldKey];\r\n    if (typeof value === \"undefined\") {\r\n      return;\r\n    }\r\n    delete params[oldKey];\r\n    params = {\r\n      ...params,\r\n      [newKey]: value,\r\n    };\r\n  });\r\n\r\n  return params;\r\n}\r\n\r\nexport default params;\r\n"],"names":["isProcessArgv","obj","process","argv","FULL_FLAG","canParse","str","startsWith","parse","_","name","value","slice","split","SHORT_FLAG","includes","POSITIONAL","all","indexOf","params","args","aliases","Array","Error","RAW","Symbol","PARSERS","list","file","positional","forEach","arg","parser","filter","p","pop","Number","Object","keys","newKey","oldKey"],"mappings":"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"}